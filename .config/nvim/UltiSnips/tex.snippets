global !p
texMathZones = ['texMathZone'+x 
                for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 
                          'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 
                          'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 
                          'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map(' + str(texMathZones) + ", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map(' 
                                + str(texIgnoreMathZones) 
                                + ", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
    synstackids = vim.eval(
        "synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
    try:
        first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
        return first != ignore
    except StopIteration:
        return False
endglobal


snippet preamble "Preamble" b
\usepackage{scrartcl}
\documentclass{scrartcl}
\usepackage{fontspec}
\setmainfont[Ligatures=TeX]{Ubuntu}
\setsansfont[Ligatures=TeX]{Ubuntu}
\setmonofont[Ligatures=TeX]{Ubuntu Mono}

${VISUAL}
endsnippet


snippet beg "Environment: \begin{...}" bA
\begin{$1}
`!p snip.rv = "" if t[1] == "document" else "  "`${0:${VISUAL}}
\end{$1}
endsnippet

snippet item "Itemize: \begin{itemize} ..." b
\begin{itemize}
  $1
\end{itemize}
$0
endsnippet

snippet emph "Emphasis: \emph{...}" A
\emph{${1:${VISUAL}}}$0
endsnippet

# Itemize should have its own context
context "not math()"
snippet * "\item ..." bA
\item $0
endsnippet

# snippet mk "Inline Math" wA
# $${1}$`!p
# if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
#     snip.rv = ' '
# else:
#     snip.rv = ''
# `$2
# endsnippet
# 
# snippet dm "Display Math" wA
# \[
# $1
# .\] $0
# endsnippet
# 
# context "math()"
# snippet // "Fraction" iA
# \\frac{${VISUAL}}{$2}$0
# endsnippet
# 
# context "math()"
# snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
# \\frac{`!p snip.rv = match.group(1)`}{$1}$0
# endsnippet
